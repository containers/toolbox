#!/bin/sh
#
# Copyright Â© 2018 â€“ 2019 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


exec 3>/dev/null

arguments="$@"
base_toolbox_command=$(basename "$0" 2>&3)
base_toolbox_image=""
environment_variables="COLORTERM \
        DBUS_SESSION_BUS_ADDRESS \
        DESKTOP_SESSION \
        DISPLAY \
        LANG \
        SHELL \
        SSH_AUTH_SOCK \
        TERM \
        VTE_VERSION \
        XDG_CURRENT_DESKTOP \
        XDG_DATA_DIRS \
        XDG_MENU_PREFIX \
        XDG_RUNTIME_DIR \
        XDG_SEAT \
        XDG_SESSION_DESKTOP \
        XDG_SESSION_ID \
        XDG_SESSION_TYPE \
        XDG_VTNR"
fgc=""

# shellcheck disable=SC1091
. /etc/os-release
release=$VERSION_ID

podman_pid=""
prefix_sudo=""
registry="registry.fedoraproject.org"
registry_candidate="candidate-registry.fedoraproject.org"
spinner_animation="[>----] [=>---] [==>--] [===>-] [====>] [----<] [---<=] [--<==] [-<===] [<====]"
spinner_template="toolbox-spinner-XXXXXXXXXX"
toolbox_container=""
toolbox_image=""
toolbox_prompt="ğŸ”¹[\u@\h \W]\\$ "
verbose=false


LGC='\033[1;32m' # Light Green Color
LBC='\033[1;34m' # Light Blue Color
NC='\033[0m' # No Color


has_prefix()
(
    str="$1"
    prefix="$2"

    ret_val=1

    case "$str" in
        "$prefix"* )
            ret_val=0
            ;;
        * )
            ret_val=1
            ;;
    esac

    return $ret_val
)


is_integer()
{
    [ "$1" != "" ] && [ $1 -eq $1 ] 2>&3
    return $?
}


spinner_start()
(
    directory="$1"
    message="$2"

    if $verbose; then
        rm --force --recursive "$directory" 2>&3
        return 0
    fi

    if ! touch "$directory/spinner-start" 2>&3; then
        echo "$base_toolbox_command: unable to start spinner: spinner start file couldn't be created" >&2
        return 1
    fi

    echo -n "$message"
    tput civis 2>&3

    (
        while [ -f "$directory/spinner-start" ]; do
            echo "$spinner_animation" | sed "s/ /\n/g" 2>&3 | while read frame; do
                echo -n "$frame"

                frame_len=${#frame}
                i=0
                while [ $i -lt $frame_len ]; do
                    printf "\b"
                    i=$((i + 1))
                done

                sleep 1
            done
        done

        printf "\033[2K" # delete entire line regardless of cursor position
        printf "\r"
        tput cnorm 2>&3

        if ! touch "$directory/spinner-stop" 2>&3; then
            echo "$base_toolbox_command: unable to stop spinner: spinner stop file couldn't be created" >&2
        fi
    ) &

    return 0
)


spinner_stop()
(
    $verbose && return
    directory="$1"

    if ! rm "$directory/spinner-start" 2>&3; then
        echo "$base_toolbox_command: unable to stop spinner: spinner start file couldn't be removed" >&2
        return
    fi

    while ! [ -f "$directory/spinner-stop" ]; do
        :
    done

    rm --force --recursive "$directory" 2>&3
)


check_image_for_volumes()
(
    image="$1"

    echo "$base_toolbox_command: checking if image $image has volumes for host bind mounts" >&3

    if volumes=$($prefix_sudo podman inspect \
                         --format "{{.Config.Volumes}}" \
                         --type image \
                         $image 2>&3); then
        if echo "$volumes" | grep "/dev/dri\|/dev/fuse" >/dev/null 2>&3; then
            echo "$base_toolbox_command: image $image has volumes for host bind mounts:" >&3
            echo "$base_toolbox_command: $volumes" >&3
            echo "$base_toolbox_command: consider re-creating image $image" >&3
        fi
    fi
)


configure_working_container()
(
    working_container_name="$1"

    if [ "$(readlink /home)" = var/home ] ; then
        need_home_link=true
    else
        need_home_link=false
    fi

    if $need_home_link ; then
        if ! $prefix_sudo buildah run $working_container_name -- \
                     sh -c 'rmdir /home && mkdir -m 0755 -p /var/home && ln -s var/home /home' 2>&3; then
            $prefix_sudo buildah rm $working_container_name >/dev/null 2>&3
            echo "$base_toolbox_command: failed to make /home a symlink" >&2
            return 1
        fi
    fi

    if ! $prefix_sudo buildah run $working_container_name -- useradd \
                 --home-dir $HOME \
                 --no-create-home \
                 --shell $SHELL \
                 --uid $UID \
                 --groups wheel \
                 $USER \
                 >/dev/null 2>&3; then
        echo "$base_toolbox_command: failed to create user $USER with UID $UID" >&2
        return 1
    fi

    if ! $prefix_sudo buildah run $working_container_name -- passwd -d $USER >/dev/null 2>&3; then
        echo "$base_toolbox_command: failed to remove password for user $USER" >&2
        return 1
    fi

    if ! $prefix_sudo buildah run $working_container_name -- passwd -d root >/dev/null 2>&3; then
        echo "$base_toolbox_command: failed to remove password for user root" >&2
        return 1
    fi

    if ! $prefix_sudo buildah config --user $USER $working_container_name >/dev/null 2>&3; then
        echo "$base_toolbox_command: failed to configure the default user as $USER" >&2
        return 1
    fi

    if ! $prefix_sudo buildah config --workingdir $HOME $working_container_name >/dev/null 2>&3; then
        echo "$base_toolbox_command: failed to configure the initial working directory to $HOME" >&2
        return 1
    fi

    return 0
)


create_environment_options()
{
    echo "$environment_variables" \
        | sed "s/ \+/\n/g" 2>&3 \
        | {
              environment_options=""
              echo "$base_toolbox_command: creating list of environment variables to forward" >&3
              while read variable; do
                  eval value="$"$variable
                  echo "$base_toolbox_command: $variable=$value" >&3
                  environment_options="$environment_options --env=$variable=$value"
              done
              echo "$base_toolbox_command: created options for environment variables to forward" >&3
              echo $environment_options >&3
              echo $environment_options
          }
}


create()
(
    dbus_system_bus_address="unix:path=/var/run/dbus/system_bus_socket"
    tmpfs_size=$((64 * 1024 * 1024)) # 64 MiB
    working_container_name="toolbox-working-container-$(uuidgen --time)"

    if [ "$DBUS_SYSTEM_BUS_ADDRESS" != "" ]; then
        dbus_system_bus_address=$DBUS_SYSTEM_BUS_ADDRESS
    fi
    dbus_system_bus_path=$(echo $dbus_system_bus_address | cut --delimiter = --fields 2 2>&3)
    dbus_system_bus_path=$(readlink --canonicalize $dbus_system_bus_path 2>&3)

    echo "$base_toolbox_command: checking if image $toolbox_image already exists" >&3

    if ! $prefix_sudo buildah inspect --type image $toolbox_image >/dev/null 2>&3; then
        echo "$base_toolbox_command: trying to create working container $working_container_name" >&3
        echo "$base_toolbox_command: looking for image localhost/$base_toolbox_image" >&3

        if ! $prefix_sudo buildah from \
                     --name $working_container_name \
                     localhost/$base_toolbox_image >/dev/null 2>&3; then
            echo "$base_toolbox_command: looking for image $registry/$fgc/$base_toolbox_image" >&3

            if spinner_directory=$(mktemp --directory --tmpdir $spinner_template 2>&3); then
                spinner_message="$base_toolbox_command: pulling from $registry: "
                if ! spinner_start "$spinner_directory" "$spinner_message"; then
                    spinner_directory=""
                fi
            else
                echo "$base_toolbox_command: unable to start spinner: spinner directory not created" >&2
                spinner_directory=""
            fi

            $prefix_sudo buildah from \
                    --name $working_container_name \
                    $registry/$fgc/$base_toolbox_image >/dev/null 2>&3
            ret_val=$?

            if [ "$spinner_directory" != "" ]; then
                spinner_stop "$spinner_directory"
            fi

            if [ $ret_val -ne 0 ]; then
                echo "$base_toolbox_command: failed to create working container" >&2
                exit 1
            fi
        fi

        echo "$base_toolbox_command: trying to configure working container $working_container_name" >&3

        if spinner_directory=$(mktemp --directory --tmpdir $spinner_template 2>&3); then
            spinner_message="$base_toolbox_command: configuring working container: "
            if ! spinner_start "$spinner_directory" "$spinner_message"; then
                spinner_directory=""
            fi
        else
            echo "$base_toolbox_command: unable to start spinner: spinner directory not created" >&2
            spinner_directory=""
        fi

        configure_working_container $working_container_name
        ret_val=$?

        if [ "$spinner_directory" != "" ]; then
            spinner_stop "$spinner_directory"
        fi

        if [ $ret_val -ne 0 ]; then
            $prefix_sudo buildah rm $working_container_name >/dev/null 2>&3
            exit 1
        fi

        echo "$base_toolbox_command: trying to create image $toolbox_image" >&3

        if spinner_directory=$(mktemp --directory --tmpdir $spinner_template 2>&3); then
            spinner_message="$base_toolbox_command: creating image $toolbox_image: "
            if ! spinner_start "$spinner_directory" "$spinner_message"; then
                spinner_directory=""
            fi
        else
            echo "$base_toolbox_command: unable to start spinner: spinner directory not created" >&2
            spinner_directory=""
        fi

        $prefix_sudo buildah commit --rm $working_container_name $toolbox_image >/dev/null 2>&3
        ret_val=$?

        if [ "$spinner_directory" != "" ]; then
            spinner_stop "$spinner_directory"
        fi

        if [ $ret_val -ne 0 ]; then
            $prefix_sudo buildah rm $working_container_name >/dev/null 2>&3
            echo "$base_toolbox_command: failed to create image $toolbox_image" >&2
            exit 1
        fi

        echo "$base_toolbox_command: created image $toolbox_image" >&3
    fi

    check_image_for_volumes "$toolbox_image"

    echo "$base_toolbox_command: checking if container $toolbox_container already exists" >&3

    if $prefix_sudo podman inspect --type container $toolbox_container >/dev/null 2>&3; then
        echo "$base_toolbox_command: container $toolbox_container already exists" >&2
        exit 1
    fi

    total_ram=$(awk '( $1 == "MemTotal:" ) { print $2 }' /proc/meminfo 2>&3) # kibibytes
    if is_integer $total_ram; then
        tmpfs_size=$((total_ram * 1024 / 2)) # bytes
    fi

    max_uid_count=65536
    max_minus_uid=$((max_uid_count - UID))
    uid_plus_one=$((UID + 1))

    echo "$base_toolbox_command: trying to create container $toolbox_container" >&3

    if spinner_directory=$(mktemp --directory --tmpdir $spinner_template 2>&3); then
        spinner_message="$base_toolbox_command: creating container $toolbox_container: "
        if ! spinner_start "$spinner_directory" "$spinner_message"; then
            spinner_directory=""
        fi
    else
        echo "$base_toolbox_command: unable to start spinner: spinner directory not created" >&2
        spinner_directory=""
    fi

    $prefix_sudo podman create \
            --group-add wheel \
            --hostname toolbox \
            --interactive \
            --name $toolbox_container \
            --network host \
            --pid host \
            --privileged \
            --security-opt label=disable \
            --tmpfs /dev/shm:size=$tmpfs_size \
            --tty \
            --uidmap $UID:0:1 \
            --uidmap 0:1:$UID \
            --uidmap $uid_plus_one:$uid_plus_one:$max_minus_uid \
            --volume $HOME:$HOME:rslave \
            --volume $XDG_RUNTIME_DIR:$XDG_RUNTIME_DIR \
            --volume $dbus_system_bus_path:$dbus_system_bus_path \
            --volume /dev/dri:/dev/dri \
            --volume /dev/fuse:/dev/fuse \
            --volume /dev/snd:/dev/snd \
            $toolbox_image \
            /bin/sh >/dev/null 2>&3
    ret_val=$?

    if [ "$spinner_directory" != "" ]; then
        spinner_stop "$spinner_directory"
    fi

    if [ $ret_val -ne 0 ]; then
        echo "$base_toolbox_command: failed to create container $toolbox_container" >&2
        exit 1
    fi

    echo "$base_toolbox_command: created container $toolbox_container" >&3
)


enter()
(
    shell_to_exec=/bin/bash

    echo "$base_toolbox_command: checking if container $toolbox_container exists" >&3

    if ! toolbox_image=$($prefix_sudo podman inspect \
                                 --format "{{.ImageName}}" \
                                 --type container \
                                 $toolbox_container 2>&3); then
        echo "$base_toolbox_command: container $toolbox_container not found" >&2
        echo "Use the 'create' command to create a toolbox." >&2
        echo "Try '$base_toolbox_command --help' for more information." >&2
        exit 1
    fi

    echo "$base_toolbox_command: container $toolbox_container was created from image $toolbox_image" >&3

    [ "$toolbox_image" != "" ] 2>&3 && check_image_for_volumes "$toolbox_image"

    echo "$base_toolbox_command: trying to start container $toolbox_container" >&3

    if ! $prefix_sudo podman start $toolbox_container >/dev/null 2>&3; then
        echo "$base_toolbox_command: failed to start container $toolbox_container" >&2
        exit 1
    fi

    if [ "$DBUS_SYSTEM_BUS_ADDRESS" != "" ]; then
        set_dbus_system_bus_address="--env DBUS_SYSTEM_BUS_ADDRESS=$DBUS_SYSTEM_BUS_ADDRESS"
    fi

    set_environment=$(create_environment_options)

    echo "$base_toolbox_command: looking for $SHELL in container $toolbox_container" >&3

    if $prefix_sudo podman exec $toolbox_container test -f $SHELL 2>&3; then
        shell_to_exec=$SHELL
    else
        echo "$base_toolbox_command: $SHELL not found in $toolbox_container; using $shell_to_exec instead" >&3
    fi

    echo "$base_toolbox_command: trying to exec $shell_to_exec in container $toolbox_container" >&3

    $prefix_sudo podman exec \
            $set_dbus_system_bus_address \
            $set_environment \
            --interactive \
            --tty \
            $toolbox_container \
            capsh --caps="" -- -c 'cd "$1"; export PS1="$2"; shift 2; exec "$@"' \
                    /bin/sh \
                    "$PWD" \
                    "$toolbox_prompt" \
                    $shell_to_exec -l 2>&3
)


list_images()
(
    if ! images=$($prefix_sudo podman images \
                          --filter "label=com.redhat.component=fedora-toolbox" \
                          --format "{{.ID}} {{.Repository}}:{{.Tag}} {{.Created}}" 2>&3); then
        echo "$base_toolbox_command: failed to list images" >&2
        return 1
    fi

    if ! output=$(echo "$images" \
                  | sed "s/ \{2,\}/\t/g" 2>&3 \
                  | column --separator $'\t' --table --table-columns "IMAGE ID,IMAGE NAME,CREATED" 2>&3); then
        echo "$base_toolbox_command: failed to parse list of images" >&2
        return 1
    fi

    if [ "$output" != "" ]; then
        echo -e "${LBC}Images created by toolbox${NC}"
        echo "$output"
    fi

    return 0
)


list_containers()
(
    if ! containers=$($prefix_sudo podman ps \
                              --all \
                              --filter "label=com.redhat.component=fedora-toolbox" \
                              --format "{{.ID}}  {{.Names}}  {{.Created}}  {{.Status}}  {{.Image}}" 2>&3); then
        echo "$base_toolbox_command: failed to list containers" >&2
        return 1
    fi

    if ! output=$(echo "$containers" \
                  | sed "s/ \{2,\}/\t/g" 2>&3 \
                  | column \
                            --separator $'\t' \
                            --table \
                            --table-columns "CONTAINER ID,CONTAINER NAME,CREATED,STATUS,IMAGE NAME" 2>&3); then
        echo "$base_toolbox_command: failed to parse list of containers" >&2
        return 1
    fi

    if [ "$output" != "" ]; then
        echo -e "${LBC}Containers created by toolbox${NC}"
        echo "$output" | head --lines 1 2>&3

        echo "$output" | tail --lines +2 2>&3 \
            | (
                  while read container; do
                      container_id=$(echo $container | cut --delimiter " " --fields 1 2>&3)
                      is_running=$($prefix_sudo podman inspect $container_id --format "{{.State.Running}}" 2>&3)
                      if $is_running; then
                          echo -e "${LGC}$container${NC}"
                      else
                          echo "$container"
                      fi
                  done
              )
    fi

    return 0
)


exit_if_extra_operand()
{
    if [ "$1" != "" ]; then
        echo "$base_toolbox_command: extra operand '$1'" >&2
        echo "Try '$base_toolbox_command --help' for more information." >&2
        exit 1
    fi
}


exit_if_missing_argument()
{
    if [ "$2" = "" ]; then
        echo "$base_toolbox_command: missing argument for '$1'" >&2
        echo "Try '$base_toolbox_command --help' for more information." >&2
        exit 1
    fi
}


exit_if_non_positive_argument()
{
    if ! is_integer "$2"; then
        echo "$base_toolbox_command: invalid argument for '$1'" >&2
        echo "Try '$base_toolbox_command --help' for more information." >&2
        exit 1
    fi
    if [ "$2" -le 0 ] 2>&3; then
        echo "$base_toolbox_command: invalid argument for '$1'" >&2
        echo "Try '$base_toolbox_command --help' for more information." >&2
        exit 1
    fi
}


exit_if_unrecognized_option()
{
    echo "$base_toolbox_command: unrecognized option '$1'" >&2
    echo "Try '$base_toolbox_command --help' for more information." >&2
    exit 1
}


forward_to_host()
(
    if [ "$DBUS_SYSTEM_BUS_ADDRESS" != "" ]; then
        set_dbus_system_bus_address="--env=DBUS_SYSTEM_BUS_ADDRESS=$DBUS_SYSTEM_BUS_ADDRESS"
    fi

    set_environment=$(create_environment_options)

    echo "$base_toolbox_command: forwarding to host: $0 $arguments" >&3
    flatpak-spawn $set_dbus_system_bus_address $set_environment --host "$0" $arguments 2>&3
)


update_container_and_image_names()
{
    base_toolbox_image="fedora-toolbox:$release"
    fgc="f$release"
    [ "$toolbox_container" = "" ] && toolbox_container="fedora-toolbox-$USER:$release"
    [ "$toolbox_image" = "" ] && toolbox_image="fedora-toolbox-$USER:$release"
}


usage()
{
    echo "Usage: toolbox [-v | --verbose]"
    echo "               create [--candidate-registry]"
    echo "                      [--container <name>]"
    echo "                      [--image <name>]"
    echo "                      [--release <release>]"
    echo "   or: toolbox [-v | --verbose]"
    echo "               enter [--container <name>]"
    echo "                     [--release <release>]"
    echo "   or: toolbox [-v | --verbose]"
    echo "               list [-c | --containers]"
    echo "                    [-i | --images]"
    echo "   or: toolbox --help"
}


while has_prefix "$1" -; do
    case $1 in
        -h | --help )
            usage
            exit
            ;;
        --sudo )
            prefix_sudo="sudo"
            ;;
        -v | --verbose )
            exec 3>&2
            verbose=true
            ;;
        * )
            exit_if_unrecognized_option $1
    esac
    shift
done

if [ -f /run/.containerenv ] 2>&3; then
    if ! which flatpak-spawn >/dev/null 2>&3; then
        echo "$base_toolbox_command: flatpak-spawn not found" >&2
        exit 1
    fi

    echo "$base_toolbox_command: looking for podman PID" >&3

    pid_i=$$
    while [ "$pid_i" -gt 1 ] 2>&3; do
        cmdline=$(cat /proc/$pid_i/cmdline 2>&3 | sed "s/\x0/ /g" 2>&3)
        if has_prefix "$cmdline" "podman exec "; then
            podman_pid=$pid_i
            break
        fi

        pid_i=$(ps -p $pid_i -o ppid= 2>&3 | sed "s/ //" 2>&3)
        if ! is_integer "$pid_i"; then
            echo "$base_toolbox_command: invalid parent PID" >&2
            break
        fi
    done

    if ! is_integer "$podman_pid"; then
        echo "$base_toolbox_command: invalid podman PID" >&2
        podman_pid=""
    fi

    if [ "$podman_pid" = "" ]; then
        echo "$base_toolbox_command: cannot be used outside podman exec" >&2
        exit 1
    fi

    echo "$base_toolbox_command: podman PID is $podman_pid" >&3
fi

if [ "$1" = "" ]; then
    echo "$base_toolbox_command: missing command" >&2
    echo "Try '$base_toolbox_command --help' for more information." >&2
    exit 1
fi

op=$1
shift

case $op in
    create )
        if is_integer "$podman_pid"; then
            forward_to_host
        else
            while has_prefix "$1" -; do
                case $1 in
                    --candidate-registry )
                        registry=$registry_candidate
                        ;;
                    --container )
                        shift
                        exit_if_missing_argument --container "$1"
                        toolbox_container=$1
                        ;;
                    --image )
                        shift
                        exit_if_missing_argument --image "$1"
                        toolbox_image=$1
                        ;;
                    --release )
                        shift
                        exit_if_missing_argument --release "$1"
                        arg=$(echo $1 | sed "s/^F\|^f//" 2>&3)
                        exit_if_non_positive_argument --release "$arg"
                        release=$arg
                        ;;
                    * )
                        exit_if_unrecognized_option $1
                esac
                shift
            done
            exit_if_extra_operand $1
            update_container_and_image_names
            create
        fi
        exit
        ;;
    enter )
        if is_integer "$podman_pid"; then
            forward_to_host
        else
            while has_prefix "$1" -; do
                case $1 in
                    --container )
                        shift
                        exit_if_missing_argument --container "$1"
                        toolbox_container=$1
                        ;;
                    --release )
                        shift
                        exit_if_missing_argument --release "$1"
                        arg=$(echo $1 | sed "s/^F\|^f//" 2>&3)
                        exit_if_non_positive_argument --release "$arg"
                        release=$arg
                        ;;
                    * )
                        exit_if_unrecognized_option $1
                esac
                shift
            done
            exit_if_extra_operand $1
            update_container_and_image_names
            enter
        fi
        exit
        ;;
    list )
        if is_integer "$podman_pid"; then
            forward_to_host
        else
            ls_images=false
            ls_containers=false
            while has_prefix "$1" -; do
                case $1 in
                    -c | --containers )
                        ls_containers=true
                        ;;
                    -i | --images )
                        ls_images=true
                        ;;
                    * )
                        exit_if_unrecognized_option $1
                esac
                shift
            done
            exit_if_extra_operand $1

            if ! $ls_containers && ! $ls_images; then
                ls_containers=true
                ls_images=true
            fi

            if $ls_images; then
                if ! images=$(list_images); then
                    exit 1
                fi
            fi

            if $ls_containers; then
                if ! containers=$(list_containers); then
                    exit 1
                fi
            fi

            $ls_images && [ "$images" != "" ] && echo "$images"
            $ls_containers && [ "$containers" != "" ] && echo "$containers"
        fi
        exit
        ;;
    * )
        echo "$base_toolbox_command: unrecognized command '$op'" >&2
        echo "Try '$base_toolbox_command --help' for more information." >&2
        exit 1
esac
